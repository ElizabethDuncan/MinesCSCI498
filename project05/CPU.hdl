// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

	Mux16(a=instruction, b=outMs, sel=instruction[15], out= mux1out);
	ARegister(in=mux1out, load=ored, out=aout, out[0..14]=addressM);
	Not(in=instruction[15], out=n15);
	Or(a=instruction[5], b=n15, out=ored);
	Mux16(a=aout, b=inM, sel=instruction[12], out=am);
	ALU(x=dout, y=am, zx=instruction[6], nx=instruction[7], zy=instruction[8], ny=instruction[9], f=instruction[10], no=instruction[11], out=outMs, out=outM, zr=zr, ng=neg);
	DRegister(in=outMs, load=anded, out=dout);
	And(a=instruction[4], b=instruction[15], out=anded);
	And(a=instruction[3], b=instruction[15], out=writeM);
	PC(in=aout, load=jump, inc=true, reset=reset, out[0..14]=pc);
	And(a=instruction[2], b=neg, out=jlt);
	And(a=instruction[1], b=zr, out=jeq);
	Or(a=zr, b=neg, out=ltz);
	Not(in=ltz, out=gtz);
	Or(a=jlt, b=jeq, out=jltjeq);
	Or(a=jltjeq, b=gtz, out=half);
	And(a=instruction[15], b=half, out=jump);
    
		
}

